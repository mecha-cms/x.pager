---
title: Pager
description: Custom page navigation.
icon: 'M22,3H5A2,2 0 0,0 3,5V9H5V5H22V19H5V15H3V19A2,2 0 0,0 5,21H22A2,2 0 0,0 24,19V5A2,2 0 0,0 22,3M7,15V13H0V11H7V9L11,12L7,15M20,13H13V11H20V13M20,9H13V7H20V9M17,17H13V15H17V17Z'
color: '#0793a0'
author: Taufik Nurrohman
image: /lot/x/pager/index.png
type: Markdown
version: 2.0.0
...

To enable the numbered page navigation feature, find a line of code that looks like this in the `pages.php` file of your
currently active layout:

~~~ .php
<?= self::pager(); ?>
~~~

Replace that line with this code:

~~~ .php
<?= self::pager('part'); ?>
~~~

### Types

#### Page

_TODO_

#### Part

Numbered page navigation style.

~~~ .php
<?= self::pager('part', [
    '0' => 'nav',
    '1' => null,
    '2' => [],
    'chunk' => $pager->chunk,
    'count' => $pager->parent->count,
    'next' => true,
    'part' => $pager->current->part,
    'peek' => 2,
    'prev' => true,
    'previous' => true // Alias of `prev`
]);
~~~

Key | Accept | Description
--- | ------ | -----------
`0` | `false|null|string` | Set this value to a tag name string to wrap the page navigation layout with a HTML element. For example, if you set this value to `'div'`, then the output will automatically be wrapped in a `'<div class="pager pager-part"> … </div>'` element.
`1` | `array|null` | _Reserved._
`2` | `array` | Use this key to add more HTML attributes to the page navigation layout wrapper. Will work only if the `0` key is set to a value other than `false` and `null`.
`chunk` | `int` | By default it will use the `chunk` value of the current page. Specify the value manually if you are using external navigation data.
`count` | `int` | By default it will use the `count` value of the current pages. Specify the value manually if you are using external navigation data.
`next` | `bool|string` | Set this value to `false` to remove the “Next” link. If the value is a string, it will be used to change the “Next” link label.
`part` | `int` | By default it will use the `part` value of the current pager. Specify the value manually if you are using external navigation data.
`peek` | `int` | Specify how many numeric links need to be displayed before and after the currently active numeric link.
`prev` | `bool|string` | Set this value to `false` to remove the “Previous” link. If the value is a string, it will be used to change the “Previous” link label.
`previous` | `bool|string` | This key is an alias of the `prev` key.

The following is an example of using the page navigation layout with external data, probably coming from a database:

~~~ .php
<?php

$chunk = 100;
$count = $base->one('SELECT count("id") AS "count" FROM "page" WHERE "parent" = ?', [$page->id])['count'] ?? 0;
$part = $site->part ?? 1;

echo self::pager('part', [
    'chunk' => $chunk,
    'count' => $count,
    'part' => $part
]);

?>
~~~

### Hooks

There is a layout hook that you can use to modify the page navigation layout output through the tokenization level if
the available options are not sufficient to meet your customization needs:

~~~ .php
Hook::set('y.pager', function ($y) {
    // Specific hook for the `page` pager type
    if ('page' === $y['type']) {
        return $y;
    }
    // Specific hook for the `part` pager type
    if ('part' === $y['type']) {
        $y[1]['description'] = [
            0 => 'span',
            1 => i('Page %d of %d', [$y['part'] ?? 1, $y['of'] ?? 1]),
            2 => [
                'id' => $id = 'description:' . substr(uniqid(), 6),
                'style' => 'margin-inline-start: auto;'
            ]
        ];
        $y[2]['aria-describedby'] = $id;
        return $y;
    }
    return $y;
});
~~~